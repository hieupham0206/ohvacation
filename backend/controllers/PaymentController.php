<?php

namespace backend\controllers;

use backend\models\table\PaymentTable;
use common\models\Customer;
use common\models\Inventory;
use common\models\Orders;
use common\models\OrdersDetail;
use common\models\Payment;
use common\models\PaymentLog;
use common\models\Voucher;
use common\utils\controller\Controller;
use common\utils\helpers\ArrayHelper;
use common\utils\helpers\Mail;
use common\utils\table\TableFacade;
use PHPExcel_Cell_DataType;
use PHPExcel_Shared_Date;
use PHPExcel_Style_NumberFormat;
use Yii;
use yii\db\Exception;
use yii\web\MethodNotAllowedHttpException;
use yii\web\NotFoundHttpException;
use yii\web\ServerErrorHttpException;

class PaymentController extends Controller
{
    public function beforeAction($action)
    {
//        if (Yii::$app->user->identity != null && Yii::$app->user->identity->username == 'chau.bui') {
//            throw new ForbiddenHttpException(Yii::t('yii', 'You are not allowed to access this page.'));
//        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
//        $mail = new Mail([
//            'subject' => 'Xác nhận thanh toán',
//            'mailTo'  => 'phamquanghieu0206@gmail.com',
//            'content' => ''
//        ]);
//        $mail->send(['html' => 'order-cancel'], [
//            'customerName' => 'Hieu',
//            'orderCode' => 123456
//        ]);
        $payment = new Payment();

        return $this->render('index', ['payment' => $payment]);
    }

    public function actionIndexTable()
    {
        $tableFacade = new TableFacade(new PaymentTable);

        return $tableFacade->getDataTable();
    }

    public function actionView()
    {
        $paymentId = Yii::$app->request->get('id', '');
        $payment   = $this->findModel($paymentId);

        return $this->render('view', [
            'payment' => $payment,
        ]);
    }

    /**
     * Finds the Payment model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * If $paymentId == '', return new Payment.
     *
     * @param $paymentId
     *
     * @return Payment the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($paymentId)
    {
        if (($model = Payment::findOne(['id' => $paymentId])) !== null) {
            return $model;
        }

        throw new NotFoundHttpException(Yii::t('yii', 'Page not found.'));
    }

    public function actionCreate()
    {
        $payment = new Payment();

        return $this->render('create', [
            'payment' => $payment,
        ]);
    }

    public function actionUpdate()
    {
        $paymentId = Yii::$app->request->get('id', '');
        $payment   = $this->findModel($paymentId);

        return $this->render('update', [
            'payment' => $payment,
        ]);
    }

    /**
     * @return string:
     * - url: lưu thành công
     * - chuỗi: lưu thất bại, trả về lỗi
     * - An internal server error occurred: không load được model
     * @throws \yii\base\InvalidParamException
     * @throws NotFoundHttpException
     * @throws ServerErrorHttpException
     * @throws \yii\base\Exception
     * @throws \yii\db\Exception
     * @throws \yii\base\InvalidCallException
     */
    public function actionSave()
    {
        $paymentId = Yii::$app->request->post('Payment')['id'];
        $payment   = $paymentId != '' ? $this->findModel($paymentId) : new Payment();

        if ($payment->load(Yii::$app->request->post())) {
            $transaction = Yii::$app->db->beginTransaction();
            try {
                $adult       = Yii::$app->request->post('adult');
                $child       = Yii::$app->request->post('child');
                $voucherCode = Yii::$app->request->post('Payment')['voucher_code'];
                if ($voucherCode !== '') {
                    $voucher = Voucher::find()->where(['code' => $voucherCode])->select(['id'])->one();
                    if ($voucher == null) {
                        return 'fail';
                    }

                    $orders = Orders::find()->where(['id' => $payment->orders_id])->one();
                    if ($orders != null) {
                        $orders->updateAttributes(['voucher_id' => $voucher->id]);
                    }
                }
                $payment->voucher_code  = $voucherCode;
                $payment->customer_note = $adult . ',' . $child;

                $dirtyAttributes = $payment->getDirtyAttributes();
                $oldAttributes   = $payment->getOldAttributes();
                if ($payment->save(false)) {
                    $paymentLog               = new PaymentLog();
                    $paymentLog->created_by   = Yii::$app->user->id;
                    $paymentLog->message      = '';
                    $paymentLog->created_date = time();
                    $paymentLog->payment_id   = $payment->id;
                    foreach ($dirtyAttributes as $attribute => $dirtyAttribute) {
                        if ($oldAttributes[$attribute] != $dirtyAttribute) {
                            if ($attribute == 'customer_note') {
                                $oldAdult = explode(',', $oldAttributes[$attribute])[0];
                                $oldChild = explode(',', $oldAttributes[$attribute])[1];
                                if ($oldAdult != $adult && $oldChild != $child) {
                                    $paymentLog->message .= 'Thay đổi số người lớn từ ' . $oldAdult . ' thành ' . $adult . ', số trẻ em từ ' . $oldChild . ' thành ' . $child;
                                } elseif ($oldAdult != $adult && $child == $oldChild) {
                                    $paymentLog->message .= 'Thay đổi số người lớn từ ' . $oldAdult . ' thành ' . $adult;
                                } elseif ($oldAdult == $adult && $child != $oldChild) {
                                    $paymentLog->message .= 'Thay đổi số trẻ em từ ' . $oldChild . ' thành ' . $child;
                                }
                            } else {
                                $paymentLog->message .= 'Thay đổi ' . $attribute . ' từ ' . $oldAttributes[$attribute] . ' thành ' . $dirtyAttribute . ', ';
                            }
                        }
                    }
                    $paymentLog->save(false);

                    $transaction->commit();

                    return 'success';
                }
            } catch (Exception $e) {
                $transaction->rollBack();

                return json_encode($payment->errors);
            }
        }

        throw new ServerErrorHttpException(Yii::t('yii', 'An internal server error occurred.'));
    }

    public function actionDelete()
    {
        $paymentId = Yii::$app->request->post('id', '');
        $payment   = Payment::findOne(['id' => $paymentId, 'status' => 1]);

        return $payment != null && $payment->updateAttributes(['status' => -1]) > 0;
    }

    /**
     * Select2 ajax Payment.
     * @return string
     * @throws \yii\base\InvalidParamException
     * @throws \yii\web\MethodNotAllowedHttpException
     */
    public function actionSelectPayment()
    {
        if (Yii::$app->request->isAjax) {
            $query    = Yii::$app->request->get('query', '');
            $page     = Yii::$app->request->get('page', 1);
            $offset   = ($page - 1) * 10;
            $payments = Payment::find()->where(['status' => 1])->andFilterWhere(['like', 'customer_name', $query])->select(['id', 'customer_name']);

            return $this->asJson([
                'total_count' => $payments->count(),
                'items'       => $payments->offset($offset)->limit(10)->all(),
            ]);
        }

        throw new MethodNotAllowedHttpException(Yii::t('yii', 'Method Not Allowed'));
    }

    public function actionUpdateOrder()
    {
        $orderId     = Yii::$app->request->post('id');
        $newStatus   = Yii::$app->request->post('newStatus', 1); //1 thanh toán, 4 hủy giao dịch
        $transaction = Yii::$app->db->beginTransaction();
        try {
            /** @var Orders $order */
            $order = Orders::find()->where(['id' => $orderId])->one();

            /** @var Customer $customer */
            $customer = Customer::find()->where(['id' => $order->customer_id])->one();
            $order->updateAttributes([
                'payment_status' => $newStatus,
                'updated_date'   => strtotime(date('d.m.Y H:i:s')),
                'updated_by'     => Yii::$app->user->id,
            ]);

            $inventoryIds = OrdersDetail::find()->where(['orders_id' => $order->id])->select(['inventory_id'])->createCommand()->queryColumn();

            $roomStatus = $newStatus == 4 ? 0 : 1;
            Inventory::updateAll(['inventory_status' => $roomStatus], ['id' => $inventoryIds]);
            $payment = Payment::find()->where(['orders_id' => $order->id])->one();
            if ($newStatus == 1) {
                $payment->updateAttributes([
                    'message'       => 'Đơn hàng đã thanh toán bởi ' . Yii::$app->user->identity->username . ' vào ngày ' . Yii::$app->formatter->asDatetime(time()) . ' , IP: ' . Yii::$app->request->getUserIP(),
                    'modified_date' => time(),
                    'response_code' => 100,
                ]);

                $inventorys = Inventory::find()->where(['id' => $inventoryIds])->all();
                if (count($inventorys) == 1) {
                    $dateIn   = date('d.m.Y H:i:s', strtotime('+1 day', $inventorys[0]->stay_date));
                    $checkOut = Yii::$app->formatter->asDate(strtotime($dateIn));
                } elseif (count($inventorys) > 1) {
                    $dateIn   = date('d.m.Y H:i:s', strtotime('+1 day', $inventorys[count($inventorys) - 1]->stay_date));
                    $checkOut = Yii::$app->formatter->asDate(strtotime($dateIn));
                } else {
                    $checkOut = '';
                }
                $checkIn = Yii::$app->formatter->asDate($inventorys[0]->stay_date);
                if ($checkIn === $checkOut) {
                    $checkIn  = $inventorys[0]->stay_date;
                    $checkOut = end($inventorys)->stay_date;
                    foreach ($inventorys as $inventory) {
                        if ($checkIn > $inventory->stay_date) {
                            $checkIn = $inventory->stay_date;
                        }
                        if ($checkOut < $inventory->stay_date) {
                            $checkOut = $inventory->stay_date;
                        }
                    }
                    $checkIn  = Yii::$app->formatter->asDate($checkIn);
                    $dateIn   = date('d.m.Y H:i:s', strtotime('+1 day', $checkOut));
                    $checkOut = Yii::$app->formatter->asDate(strtotime($dateIn));
                }
                $mail = new Mail([
                    'subject' => 'Xác nhận thanh toán',
                    'mailTo'  => $customer->email,
                    'content' => '',
                ]);
                $mail->send(['html' => 'order-confirm'], [
                    'customerName'      => $payment->customer_name,
                    'orderCode'         => $order->code,
                    'amount'            => $order->total_price,
                    'confimationNumber' => $order->id,
                    'arrivalDate'       => $checkIn,
                    'departureDate'     => $checkOut,
                    'note'              => $payment->getTotalCustomer(),
                ]);
            } else {
                $payment->updateAttributes([
                    'message'       => 'Đơn hàng đã bị hủy bởi ' . Yii::$app->user->identity->username . ' vào ngày ' . Yii::$app->formatter->asDatetime(time()) . ' , IP: ' . Yii::$app->request->getUserIP(),
                    'modified_date' => time(),
                ]);

//                $mail = new Mail([
//                    'content' => 'Đơn hàng ' . $order->code . ' đã bị hủy. Vui lòng đặt phòng lại hoặc liên hệ để được hướng dẫn',
//                    'subject' => 'Xác nhận thanh toán',
//                    'mailTo'  => $customer->email
//                ]);
//                $mail->send();
            }

            $transaction->commit();

//            $transaction->rollBack();

            return 'success';
        } catch (Exception $e) {
            $transaction->rollBack();

            return $e->getMessage();
        }
    }

    public function actionSendMailConfirm()
    {
        $orderId = Yii::$app->request->post('id');
        /** @var Orders $order */
        $order = Orders::find()->where(['id' => $orderId])->one();

        /** @var Customer $customer */
        $customer     = Customer::find()->where(['id' => $order->customer_id])->one();
        $inventoryIds = OrdersDetail::find()->where(['orders_id' => $order->id])->select(['inventory_id'])->createCommand()->queryColumn();
        /** @var Inventory[] $inventorys */
        $inventorys = Inventory::find()->where(['id' => $inventoryIds])->all();

        if (count($inventorys) == 1) {
            $dateIn   = date('d.m.Y H:i:s', strtotime('+1 day', $inventorys[0]->stay_date));
            $checkOut = Yii::$app->formatter->asDate(strtotime($dateIn));
        } elseif (count($inventorys) > 1) {
            $dateIn   = date('d.m.Y H:i:s', strtotime('+1 day', $inventorys[count($inventorys) - 1]->stay_date));
            $checkOut = Yii::$app->formatter->asDate(strtotime($dateIn));
        } else {
            $checkOut = '';
        }
        $checkIn = Yii::$app->formatter->asDate($inventorys[0]->stay_date);
        if ($checkIn === $checkOut) {
            $checkIn  = $inventorys[0]->stay_date;
            $checkOut = end($inventorys)->stay_date;
            foreach ($inventorys as $inventory) {
                if ($checkIn > $inventory->stay_date) {
                    $checkIn = $inventory->stay_date;
                }
                if ($checkOut < $inventory->stay_date) {
                    $checkOut = $inventory->stay_date;
                }
            }
            $checkIn  = Yii::$app->formatter->asDate($checkIn);
            $dateIn   = date('d.m.Y H:i:s', strtotime('+1 day', $checkOut));
            $checkOut = Yii::$app->formatter->asDate(strtotime($dateIn));
        }
        /** @var Payment $payment */
        $payment = Payment::find()->where(['orders_id' => $order->id])->one();
        $mail    = new Mail([
            'subject' => 'Xác nhận thanh toán',
            'mailTo'  => $payment->customer_email,
            'content' => '',
        ]);

        return $mail->send(['html' => 'order-confirm'], [
            'customerName'      => $payment->customer_name,
            'orderCode'         => $order->code,
            'amount'            => $order->total_price,
            'confimationNumber' => $order->id,
            'arrivalDate'       => $checkIn,
            'departureDate'     => $checkOut,
            'note'              => $payment->getTotalCustomer(),
        ]) ? 'success' : 'fail';
    }

    public function actionSuccessOrder()
    {
        $orderId     = Yii::$app->request->post('id');
        $transaction = Yii::$app->db->beginTransaction();
        try {
            $canUpdate    = true;
            $inventoryIds = [];
            /** @var Orders $order */
            $order = Orders::find()->where(['id' => $orderId])->one();

            $orderDetails = OrdersDetail::find()->where(['orders_id' => $order->id])->all();
            /** @var OrdersDetail[] $orderDetails */
            foreach ($orderDetails as $orderDetail) {
                /** @var Inventory $inventory */
                $inventory = Inventory::find()->where(['id' => $orderDetail->inventory_id])->one();
                if ($inventory->inventory_status == 0) {
                    $inventory->updateAttributes(['inventory_status' => 1]);
                    $inventoryIds[] = $inventory->id;
                } else {
                    $newInventory = Inventory::find()->where(['stay_date' => $inventory->stay_date, 'inventory_status' => 0])->one();
                    if ($newInventory == null) {
                        $canUpdate = false;
                        break;
                    }
                    $orderDetail->updateAttributes(['inventory_id' => $newInventory->id]);
                    $newInventory->updateAttributes(['inventory_status' => 1]);
                    $inventoryIds[] = $newInventory->id;
                }
            }
            if ($canUpdate) {
                /** @var Customer $customer */
                $customer = Customer::find()->where(['id' => $order->customer_id])->one();
                $order->updateAttributes([
                    'payment_status' => 1,
                    'updated_date'   => strtotime(date('d.m.Y H:i:s')),
                    'updated_by'     => Yii::$app->user->id,
                ]);

                /** @var Payment $payment */
                $payment = Payment::find()->where(['orders_id' => $order->id])->one();

                $payment->updateAttributes([
                    'message'       => 'Đơn hàng đã thanh toán bởi ' . Yii::$app->user->identity->username . ' vào ngày ' . Yii::$app->formatter->asDatetime(time()) . ' , IP: ' . Yii::$app->request->getUserIP(),
                    'modified_date' => time(),
                    'response_code' => 100,
                ]);

                $inventorys = Inventory::find()->where(['id' => $inventoryIds])->all();
                if (count($inventorys) == 1) {
                    $dateIn   = date('d.m.Y H:i:s', strtotime('+1 day', $inventorys[0]->stay_date));
                    $checkOut = Yii::$app->formatter->asDate(strtotime($dateIn));
                } elseif (count($inventorys) > 1) {
                    $dateIn   = date('d.m.Y H:i:s', strtotime('+1 day', $inventorys[count($inventorys) - 1]->stay_date));
                    $checkOut = Yii::$app->formatter->asDate(strtotime($dateIn));
                } else {
                    $checkOut = '';
                }
                $checkIn = Yii::$app->formatter->asDate($inventorys[0]->stay_date);
                if ($checkIn === $checkOut) {
                    $checkIn  = $inventorys[0]->stay_date;
                    $checkOut = end($inventorys)->stay_date;
                    foreach ($inventorys as $inventory) {
                        if ($checkIn > $inventory->stay_date) {
                            $checkIn = $inventory->stay_date;
                        }
                        if ($checkOut < $inventory->stay_date) {
                            $checkOut = $inventory->stay_date;
                        }
                    }
                    $checkIn  = Yii::$app->formatter->asDate($checkIn);
                    $dateIn   = date('d.m.Y H:i:s', strtotime('+1 day', $checkOut));
                    $checkOut = Yii::$app->formatter->asDate(strtotime($dateIn));
                }
                $mail = new Mail([
                    'subject' => 'Xác nhận thanh toán',
                    'mailTo'  => $customer->email,
                    'content' => '',
                ]);
                $mail->send(['html' => 'order-confirm'], [
                    'customerName'      => $payment->customer_name,
                    'orderCode'         => $order->code,
                    'amount'            => $order->total_price,
                    'confimationNumber' => $order->id,
                    'arrivalDate'       => $checkIn,
                    'departureDate'     => $checkOut,
                    'note'              => $payment->getTotalCustomer(),
                ]);
                $transaction->commit();

                return 'success';
            } else {
                $transaction->rollBack();

                return 'fail';
            }
        } catch (Exception $e) {
            $transaction->rollBack();

            return $e->getMessage();
        }
    }

    public function actionTestCancel()
    {
        $count    = 0;
        $payments = Payment::find()->where('created_date < (UNIX_TIMESTAMP() - 900)')->andWhere([
            'or',
            ['response_code' => null],
            ['modified_date' => null],
        ])->all();
//var_dump($payments);die;

        $orderIds = ArrayHelper::getColumn($payments, 'orders_id');
//        $inventorys   = OrdersDetail::find()->where(['orders_id' => $orderIds])->select(['inventory_id'])->createCommand()->queryColumn();
//        $inventoryIds = ArrayHelper::getValue($inventorys, 'id');
        $inventoryIds = OrdersDetail::find()->where(['orders_id' => $orderIds])->select(['inventory_id'])->createCommand()->queryColumn();
        Inventory::updateAll(['inventory_status' => 0], ['id' => $inventoryIds]);
        /** @var Payment[] $payments */
        foreach ($payments as $payment) {
            /** @var Orders $order */
            $order = Orders::find()->where(['id' => $payment->orders_id])->one();
            $order->updateAttributes(['payment_status' => 4]);
            /** @var Payment $payment */
            $message = 'Đơn hàng hết hạn thanh toán';
            $count   += $payment->updateAttributes([
                'modified_date' => time(),
                'response_code' => -1,
                'message'       => $message,
            ]);
        }

        return $count;
    }

    public function actionExportOrders()
    {
        $objPHPExcel = new \PHPExcel();
        $payment     = new Payment();
        //PAGE SETUP
        //$objPHPExcel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE)->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
        $titles = [
            $payment->getAttributeLabel('created_date'),
            $payment->getAttributeLabel('voucher_code'),
            'Mã Survey',
            $payment->getAttributeLabel('customer_name'),
            'Ngày nhận phòng',
            'Ngày trả phòng',
            $payment->getAttributeLabel('customer_phone'),
            $payment->getAttributeLabel('customer_email'),
            'Ngày thanh toán',
            $payment->getAttributeLabel('transaction_info'),
            $payment->getAttributeLabel('order_code'),
            $payment->getAttributeLabel('total_price'),
            $payment->getAttributeLabel('type'),
            $payment->getAttributeLabel('status'),
            'Người lớn',
            'Trẻ em',
        ];
        $colums = range('A', 'P');
        foreach ($colums as $key => $column) {
            $objPHPExcel->getActiveSheet()->getColumnDimension($column)->setAutoSize(true);
            $objPHPExcel->getActiveSheet()->setCellValue($column . '2', $titles[$key]);
        }

        $row = 3;
        /** @var Payment[] $payments */
//        $payments    = Payment::find()->joinWith(['orders'])->where(['orders.payment_status' => 1])->all();
        $filterDatas  = Yii::$app->cache->get('paymentFilter');
        $orderIds     = [];
        $filterDateIn = null;

        if ($filterDatas['date_in'] != '') {
            $filterDateIn = strtotime(str_replace('/', '-', $filterDatas['date_in']));
            $inIds        = Inventory::find()->where(['stay_date' => $filterDateIn])
                                     ->select(['id'])->createCommand()->queryColumn();
            $orderIds     = OrdersDetail::find()->where(['inventory_id' => $inIds])
                                        ->select(['orders_id'])->createCommand()->queryColumn();

        }
        $models = Payment::find()->joinWith(['orders'])->andFilterWhere([
            'and',
            ['like', 'customer_name', $filterDatas['customer_name']],
            ['like', 'customer_phone', $filterDatas['customer_phone']],
            ['like', 'customer_email', $filterDatas['customer_email']],
            ['like', 'transaction_info', $filterDatas['transaction_info']],
            ['like', 'voucher_code', $filterDatas['voucher_code']],
            ['like', 'orders.code', $filterDatas['order_code']],
            ['type' => $filterDatas['type']],
            ['orders.payment_status' => $filterDatas['status']],
            ['orders_id' => $orderIds],
        ])->distinct();

        if ($filterDatas['date_from'] != '' && $filterDatas['date_to'] == '') {
            $startDate = strtotime(str_replace('/', '-', $filterDatas['date_from']) . ' 00:00:00');
            $endDate   = strtotime(str_replace('/', '-', $filterDatas['date_from']) . ' 23:59:59');

            $models = $models->andFilterWhere(['between', 'payment.created_date', $startDate, $endDate]);
        } else {
            if ($filterDatas['date_from'] == '' && $filterDatas['date_to'] != '') {
                $startDate = strtotime(str_replace('/', '-', $filterDatas['date_to']) . ' 00:00:00');
                $endDate   = strtotime(str_replace('/', '-', $filterDatas['date_to']) . ' 23:59:59');

                $models = $models->andFilterWhere(['between', 'payment.created_date', $startDate, $endDate]);
            } else {
                if ($filterDatas['date_from'] != '' && $filterDatas['date_to'] != '') {
                    $startDate = strtotime(str_replace('/', '-', $filterDatas['date_from']) . ' 00:00:00');
                    $endDate   = strtotime(str_replace('/', '-', $filterDatas['date_to']) . ' 23:59:59');

                    $models = $models->andFilterWhere(['between', 'payment.created_date', $startDate, $endDate]);
                }
            }
        }

        $models = $models->orderBy(['id' => SORT_DESC])->all();
        if ($filterDatas['date_in'] != '') {
            foreach ($models as $paymentData) {
                $surveyCode = Voucher::find()->where(['code' => $paymentData->voucher_code])->select(['survey_code'])->createCommand()->queryScalar();

                $inventoryIds = OrdersDetail::find()->where(['orders_id' => $paymentData->orders_id])->select(['inventory_id'])->createCommand()->queryColumn();
                /** @var Inventory[] $inventorys */
                $inventorys = Inventory::find()->where(['id' => $inventoryIds])->all();
                if ($filterDateIn == $inventorys[0]->stay_date) {
                    $dateIn   = date('d.m.Y H:i:s', strtotime('+1 day', $inventorys[count($inventorys) - 1]->stay_date));
                    $checkOut = strtotime($dateIn);
                    $adults   = $customers = explode(',', $paymentData->customer_note)[0];
                    $childs   = $customers = explode(',', $paymentData->customer_note)[1];

                    $objPHPExcel->getActiveSheet()->setCellValue('D' . $row, $paymentData->customer_name);
                    $objPHPExcel->getActiveSheet()->setCellValue('G' . $row, $paymentData->customer_phone);
                    $objPHPExcel->getActiveSheet()->setCellValue('H' . $row, $paymentData->customer_email);
                    $objPHPExcel->getActiveSheet()->setCellValue('A' . $row, PHPExcel_Shared_Date::PHPToExcel($paymentData->created_date));
                    $objPHPExcel->getActiveSheet()->getStyle('A' . $row)->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_DATE_DATETIME);

                    $objPHPExcel->getActiveSheet()->setCellValue('I' . $row, PHPExcel_Shared_Date::PHPToExcel($paymentData->modified_date, true, 'Asia/Ho_Chi_Minh'));
                    $objPHPExcel->getActiveSheet()->getStyle('I' . $row)->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_DATE_DATETIME);
                    $objPHPExcel->getActiveSheet()->setCellValue('J' . $row, $paymentData->transaction_info);
                    $objPHPExcel->getActiveSheet()->setCellValue('K' . $row, $paymentData->order_code);
                    $objPHPExcel->getActiveSheet()->setCellValueExplicit('L' . $row, $paymentData->total_price, PHPExcel_Cell_DataType::TYPE_NUMERIC);
                    $objPHPExcel->getActiveSheet()->getStyle('L' . $row)->getNumberFormat()->setFormatCode('#,#0.00');

                    $objPHPExcel->getActiveSheet()->setCellValue('B' . $row, $paymentData->voucher_code);
                    $objPHPExcel->getActiveSheet()->setCellValue('C' . $row, $surveyCode);
                    $objPHPExcel->getActiveSheet()->setCellValue('M' . $row, $paymentData->getType());
                    $objPHPExcel->getActiveSheet()->setCellValue('N' . $row, $paymentData->getStatus($paymentData->orders->payment_status));
                    $objPHPExcel->getActiveSheet()->setCellValue('O' . $row, $adults);
                    $objPHPExcel->getActiveSheet()->setCellValue('P' . $row, $childs);
                    $objPHPExcel->getActiveSheet()->setCellValue('E' . $row, PHPExcel_Shared_Date::PHPToExcel($inventorys[0]->stay_date));
                    $objPHPExcel->getActiveSheet()->getStyle('E' . $row)->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_DATE_DDMMYYYY);
                    $objPHPExcel->getActiveSheet()->setCellValue('F' . $row, PHPExcel_Shared_Date::PHPToExcel($checkOut));
                    $objPHPExcel->getActiveSheet()->getStyle('F' . $row)->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_DATE_DDMMYYYY);
                    $row++;
                }
            }
        } else {
            foreach ($models as $paymentData) {
                $surveyCode = Voucher::find()->where(['code' => $paymentData->voucher_code])->select(['survey_code'])->createCommand()->queryScalar();

                $inventoryIds = OrdersDetail::find()->where(['orders_id' => $paymentData->orders_id])->select(['inventory_id'])->createCommand()->queryColumn();
                /** @var Inventory[] $inventorys */
                $inventorys = Inventory::find()->where(['id' => $inventoryIds])->all();
                $dateIn     = date('d.m.Y H:i:s', strtotime('+1 day', $inventorys[count($inventorys) - 1]->stay_date));
                $checkOut   = strtotime($dateIn);
                $adults     = $customers = explode(',', $paymentData->customer_note)[0];
                $childs     = $customers = explode(',', $paymentData->customer_note)[1];

                $objPHPExcel->getActiveSheet()->setCellValue('D' . $row, $paymentData->customer_name);
                $objPHPExcel->getActiveSheet()->setCellValue('G' . $row, $paymentData->customer_phone);
                $objPHPExcel->getActiveSheet()->setCellValue('H' . $row, $paymentData->customer_email);
                $objPHPExcel->getActiveSheet()->setCellValue('A' . $row, PHPExcel_Shared_Date::PHPToExcel($paymentData->created_date));
                $objPHPExcel->getActiveSheet()->getStyle('A' . $row)->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_DATE_DATETIME);

                $objPHPExcel->getActiveSheet()->setCellValue('I' . $row, PHPExcel_Shared_Date::PHPToExcel($paymentData->modified_date, true, 'Asia/Ho_Chi_Minh'));
                $objPHPExcel->getActiveSheet()->getStyle('I' . $row)->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_DATE_DATETIME);
                $objPHPExcel->getActiveSheet()->setCellValue('J' . $row, $paymentData->transaction_info);
                $objPHPExcel->getActiveSheet()->setCellValue('K' . $row, $paymentData->order_code);
                $objPHPExcel->getActiveSheet()->setCellValueExplicit('L' . $row, $paymentData->total_price, PHPExcel_Cell_DataType::TYPE_NUMERIC);
                $objPHPExcel->getActiveSheet()->getStyle('L' . $row)->getNumberFormat()->setFormatCode('#,#0.00');

                $objPHPExcel->getActiveSheet()->setCellValue('B' . $row, $paymentData->voucher_code);
                $objPHPExcel->getActiveSheet()->setCellValue('C' . $row, $surveyCode);
                $objPHPExcel->getActiveSheet()->setCellValue('M' . $row, $paymentData->getType());
                $objPHPExcel->getActiveSheet()->setCellValue('N' . $row, $paymentData->getStatus($paymentData->orders->payment_status));
                $objPHPExcel->getActiveSheet()->setCellValue('O' . $row, $adults);
                $objPHPExcel->getActiveSheet()->setCellValue('P' . $row, $childs);
                $objPHPExcel->getActiveSheet()->setCellValue('E' . $row, PHPExcel_Shared_Date::PHPToExcel($inventorys[0]->stay_date));
                $objPHPExcel->getActiveSheet()->getStyle('E' . $row)->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_DATE_DDMMYYYY);
                $objPHPExcel->getActiveSheet()->setCellValue('F' . $row, PHPExcel_Shared_Date::PHPToExcel($checkOut));
                $objPHPExcel->getActiveSheet()->getStyle('F' . $row)->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_DATE_DDMMYYYY);
                $row++;
            }
        }

        //ACTIVE SHEET STYLE FORMAT
        $objPHPExcel->getActiveSheet()->getStyle('A2:P2')->getFont()->setBold(true)->setSize(11);
        $objPHPExcel->getActiveSheet()->getStyle('A2:P2')->getAlignment()->applyFromArray(['horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER])->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
        $objPHPExcel->getActiveSheet()->getStyle("A2:P$row")->getBorders()->getAllBorders()->setBorderStyle(\PHPExcel_Style_Border::BORDER_THIN);
        ob_start();
        header('Pragma: public');
        header('Expires: 0');
        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename=Transaction' . Yii::$app->formatter->asDatetime(time()) . '.xlsx ');
        header('Content-Transfer-Encoding: binary ');
        header('Cache-Control: max-age=0');

        $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
    }

    public function actionGetOrders()
    {
//        Payment::updateAll(['response_code' => 0, 'message' => 'Thanh toán thành công', 'transaction_info' => '196655'], ['orders_id' => [184]]);
//        Payment::updateAll(['response_code' => 0, 'message' => 'Thanh toán thành công', 'transaction_info' => '196656'], ['orders_id' => [187]]);
//        Orders::updateAll(['payment_status' => 1], ['id' => [184, 187]]);
//        $inventoryIds = OrdersDetail::find()->where(['orders_id' => [184, 187]])->select(['inventory_id'])->createCommand()->queryColumn();
//        var_dump(Inventory::find()->where(['id' => $inventoryIds])->select(['inventory_status', 'id'])->createCommand()->queryAll());die;
//        return Inventory::updateAll(['inventory_status' => 2], ['id' => ['2345', '3244', '3373'], 'inventory_status' => 0]);//2227
//        Orders::updateAll(['payment_status' => 1], ['id' => [184, 187]]);
//        Payment::updateAll(['response_code' => 0, 'message' => 'Request was processed successfully.'], ['orders_id' => [184, 187]]);
//        $inventorys = Inventory::find()->where(['id' => $inventoryIds])->select(['id', 'inventory_status'])->createCommand()->queryAll();

//        var_dump(Orders::findOne(184));die;
//        var_dump(Payment::findOne(['orders_id' => 184]));die;

        $inventory = Inventory::findOne(2229);

        return $inventory->updateAttributes(['inventory_status' => 0]);
        die;
//        $inventoryTemp = Inventory::find()->where(['stay_date' => $inventory->stay_date, 'inventory_status' => 0])->one();
//////        var_dump($inventoryTemp);die;
//////
////OrdersDetail::updateAll(['inventory_id' => $inventoryTemp->id], ['id' => 367]);
////        $inventoryTemp->updateAttributes(['inventory_status' => 1]);
//////
//OrdersDetail::updateAll(['inventory_id' => $inventoryTemp->id], ['id' => 391]);
//        return $inventoryTemp->updateAttributes(['inventory_status' => 1]);
//
//        return Inventory::updateAll(['inventory_status' => 1], ['id' => 2228]);
        var_dump(Yii::$app->db->createCommand("SELECT
  `inventory_id`,
  `orders_id`,
  count(*)
FROM `orders_detail`
  LEFT JOIN orders
  ON orders_detail.orders_id = orders.id
  WHERE payment_status != 1
  AND orders_detail.id IN (391)
GROUP BY `inventory_id`
")->queryAll());
        die;
    }

    public function actionUpdatePaymentTransaction()
    {
        $transaction = Yii::$app->db->beginTransaction();
        try {
            $a = 0;
//        return Yii::$app->db->createCommand("ALTER TABLE `payment` CHANGE `order_code` `order_code` VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'mã đơn hàng của hệ thống';")->execute();
            $orderIds     = [241];
            $transactions = ['4974264547276697303648'];
            foreach ($orderIds as $key => $orderId) {
                $payment = Payment::find()->where(['orders_id' => $orderId])->one();
//                var_dump($payment);die;
                $a += $payment->updateAttributes([
                    'transaction_info' => (string) $transactions[$key],
                ]);
            }
            $transaction->commit();

            return $a;
        } catch (Exception $e) {
            $transaction->rollBack();

            return $e->getMessage();
        }

    }

    public function actionReorder()
    {
        $orders = Orders::find()->where(['id' => 44])->one();
//        $orderDetails = OrdersDetail::find()->where(['orders_id' => 44])->select(['inventory_id'])->createCommand()->queryColumn();
//        $inventory = Inventory::find()->where(['id' => $orderDetails])->select(['id', 'inventory_status'])->asArray()->all();
        Inventory::updateAll(['inventory_status' => 0], ['id' => [6024, 6131]]);
        $orders->updateAttributes(['payment_status' => 4]);
//        var_dump($inventory);die;
    }

    public function actionModalEditPayment()
    {
        $paymentId = Yii::$app->request->post('paymentId');

        $payment = $this->findModel($paymentId);
        $adults  = explode(',', $payment->customer_note)[0];
        $childs  = explode(',', $payment->customer_note)[1];

        return $this->renderAjax('_form', ['payment' => $payment, 'adults' => $adults, 'childs' => $childs]);
    }

    public function actionModalHistory()
    {
        $paymentId   = Yii::$app->request->post('paymentId');
        $paymentLogs = PaymentLog::find()->where(['payment_id' => $paymentId])
                                 ->andFilterWhere(['>', 'created_by', 1])
                                 ->all();

        return $this->renderAjax('_history', ['paymentLogs' => $paymentLogs]);
    }

    public function actionCreateLogTable()
    {
        return Yii::$app->db->createCommand('CREATE TABLE `payment_log` (
  `id` INT(11) NOT NULL,
  `payment_id` INT(10) UNSIGNED NOT NULL,
  `message` TEXT NOT NULL,
  `created_date` INT(11) NOT NULL,
  `created_by` INT(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


ALTER TABLE `payment_log`
  ADD PRIMARY KEY (`id`),
  ADD KEY `created_by` (`created_by`),
  ADD KEY `payment_id` (`payment_id`);


ALTER TABLE `payment_log`
  MODIFY `id` INT(11) NOT NULL AUTO_INCREMENT;
  ALTER TABLE `payment_log` ADD FOREIGN KEY (`payment_id`) REFERENCES `payment`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT; ALTER TABLE `payment_log` ADD FOREIGN KEY (`created_by`) REFERENCES `user`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;
  SET FOREIGN_KEY_CHECKS=1;')->execute();
    }

    public function actionTestTrans()
    {
        $paymentIds = Payment::find()->where(['not in', 'response_code', [100, 2]])
                             ->andWhere('message like "%Đơn hàng đã thanh toán bởi%"')
                             ->select(['id'])->createCommand()->queryColumn();
        $r          = Payment::updateAll(['response_code' => 100], ['id' => $paymentIds]);
        var_dump($r);
        var_dump(Payment::find()->where(['in', 'response_code', [100, 2]])
                        ->andWhere('message like "%Đơn hàng đã thanh toán bởi%"')
                        ->select(['id', 'response_code'])->createCommand()->queryColumn());
        die;
    }
}
