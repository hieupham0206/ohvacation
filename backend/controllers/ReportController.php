<?php

namespace backend\controllers;

use Carbon\Carbon;
use common\models\Inventory;
use common\models\Orders;
use common\utils\helpers\ArrayHelper;
use common\utils\helpers\TimeHelper;
use Yii;
use yii\web\Controller;
use yii\web\ForbiddenHttpException;

class ReportController extends Controller
{
//    public function beforeAction($action)
//    {
//        if (Yii::$app->user->identity != null && Yii::$app->user->identity->username == 'chau.bui') {
//            throw new ForbiddenHttpException(Yii::t('yii', 'You are not allowed to access this page.'));
//        }
//        return parent::beforeAction($action); // TODO: Change the autogenerated stub
//    }

    public function actionIndex()
    {
        return $this->render('index');
    }

    //Báo cáo kho
    public function actionInventoryReport()
    {
        $inventory = new Inventory();

        return $this->render('inventoryReport', ['inventory' => $inventory]);
    }

    public function actionGenerateByDateReport()
    {
        $dateFrom = Yii::$app->request->post('dateFrom');
        $dateTo   = Yii::$app->request->post('dateTo');
        $checkAll = Yii::$app->request->post('checkAll');

        $datas = [];
        $rooms = Inventory::find()->where(['status' => 1, 'inventory_status' => 0]);

	    $periods = TimeHelper::getDatesFromRange($dateFrom, $dateTo, 'Y-m-d');
	    if ($checkAll == 0) {
            if ($dateTo != '' || $dateFrom != '') {
                if ($dateTo != '' && $dateFrom == '') {
                    $dateFrom = strtotime($dateFrom . ' 00:00:00');

                    $rooms = $rooms->andFilterWhere(['stay_date' => $dateFrom]);
                } else if ($dateTo == '' && $dateFrom != '') {
                    $dateTo = strtotime($dateTo . ' 00:00:00');

                    $rooms = $rooms->andFilterWhere(['stay_date' => $dateTo]);
                } else {
                    $dateFrom = strtotime($dateFrom . ' 00:00:00');
                    $dateTo   = strtotime($dateTo . ' 00:00:00');

                    $rooms = $rooms->andFilterWhere(['between', 'stay_date', $dateFrom, $dateTo]);
                }
            } else {
                $rooms = $rooms->andFilterWhere(['stay_date' => strtotime(date('d.m.Y') . '00:00:00')]);
            }
        }
        $rooms = $rooms->groupBy(['DATE(from_unixtime(stay_date))'])->select('count(*) as total, DATE(from_unixtime(stay_date)) as stay_date')->createCommand()->queryAll();
	    $orderDates = ArrayHelper::getColumn($rooms, 'stay_date');

	    $diffDates = array_diff($periods, $orderDates);
        /** @var Inventory[] $rooms */
        foreach ($rooms as $room) {
            $datas[] = [
//                'name' => Yii::$app->formatter->asDate($room['stay_date']),
                'name' => Yii::$app->formatter->asDate($room['stay_date']),
                'y'    => (int)$room['total']
            ];
        }
	    foreach ($diffDates as $diffDate) {
		    $datas[] = [
			    'name' => Yii::$app->formatter->asDate($diffDate),
			    'y'    => 0
		    ];
	    }
	    ArrayHelper::multisort( $datas, function($item1, $item2) {
		    return strtotime($item1["name"]) - strtotime($item2["name"]);
	    });
//	    usort($datas, function($item1, $item2) {
//	    	return strtotime($item1["name"]) - strtotime($item2["name"]);
//	    });
        Yii::$app->cache->set('reportDateInventory', $datas);

        return empty($datas) ? 'empty' : $this->asJson($datas);
    }

    //Báo cáo doanh thu
    public function actionRevenueReport()
    {
        return $this->render('revenueReport');
    }

    public function actionGenerateRevenueReport()
    {
        $dateFrom   = Yii::$app->request->post('dateFrom');
        $dateTo     = Yii::$app->request->post('dateTo');
        $presetDate = Yii::$app->request->post('presetDate', '');

//        $periods = array_map(function ($date) {
//            return strtotime($date);
//        }, $periods);

        $orders = Orders::find()->where(['payment_status' => 1]);
        $datas  = [];

        if ($dateTo != '' || $dateFrom != '') {
            $periods = TimeHelper::getDatesFromRange($dateFrom, date('d-m-Y'), 'Y-m-d');
            if ($dateTo == '' && $dateFrom != '') {
                $dateTempFrom = strtotime($dateFrom . '00:00:00');
                $dateTempTo   = strtotime($dateFrom . '23:59:59');

            } else if ($dateTo != '' && $dateFrom == '') {
                $dateTempFrom = strtotime($dateTo . '00:00:00');
                $dateTempTo   = strtotime($dateTo . '23:59:59');

            } else {
                $dateTempFrom = strtotime($dateFrom . '00:00:00');
                $dateTempTo   = strtotime($dateTo . '23:59:59');
            }

            $orders = $orders->joinWith(['payments'])
                             ->andFilterWhere(['>=', 'orders.created_date', $dateTempFrom])
                             ->andFilterWhere(['<=', 'orders.created_date', $dateTempTo])
                             ->groupBy(['DATE(from_unixtime(payment.created_date))'])
                             ->select('sum(orders.total_price) as total_price, DATE(from_unixtime(payment.created_date)) as created_date')
                             ->createCommand()->queryAll();

            if ($dateTo != '' && $dateFrom != '') {
                $orderDates = ArrayHelper::getColumn($orders, 'created_date');

                $diffDates = array_diff($periods, $orderDates);
                foreach ($orderDates as $key => $date) {
                    $datas[] = [
                        'name' => Yii::$app->formatter->asDate($date),
                        'y'    => (int)$orders[array_search($date, $orderDates, false)]['total_price']
                    ];
                }
                foreach ($diffDates as $diffDate) {
                    $datas[] = [
                        'name' => Yii::$app->formatter->asDate($diffDate),
                        'y'    => 0
                    ];
                }
            } else {
                foreach ($orders as $key => $order) {
                    $datas[] = [
                        'name' => Yii::$app->formatter->asDate($order['created_date']),
                        'y'    => (int)$order['total_price']
                    ];
                }
            }
        } else {
            $monday          = Carbon::now()->startOfWeek();
            $sunday          = Carbon::now()->endOfWeek();
            $firstDayOfMonth = Carbon::now()->startOfMonth();
            $lastDayOfMonth  = Carbon::now()->lastOfMonth();
            if ($presetDate == 1) {
                $dateFrom = $monday->toDateString();
                $dateTo   = $sunday->toDateString();
                $periods  = TimeHelper::getDatesFromRange($dateFrom, $dateTo, 'Y-m-d');
            } else {
                $dateFrom = $firstDayOfMonth->toDateString();
                $dateTo   = $lastDayOfMonth->toDateString();
                $periods  = TimeHelper::getDatesFromRange($dateFrom, $dateTo, 'Y-m-d');
            }

            $dateFrom = strtotime($dateFrom . '00:00:00');
            $dateTo   = strtotime($dateTo . '23:59:59');

            $orders = $orders->joinWith(['payments'])
                             ->andFilterWhere(['>=', 'orders.created_date', $dateFrom])
                             ->andFilterWhere(['<=', 'orders.created_date', $dateTo])
                             ->groupBy(['DATE(from_unixtime(payment.created_date))'])
                             ->select('sum(orders.total_price) as total_price, DATE(from_unixtime(payment.created_date)) as created_date')
                             ->createCommand()->queryAll();

            $orderDates = ArrayHelper::getColumn($orders, 'created_date');

            $diffDates = array_diff($periods, $orderDates);
            foreach ($orderDates as $key => $date) {
                $datas[] = [
                    'name' => Yii::$app->formatter->asDate($date),
                    'y'    => (int)$orders[array_search($date, $orderDates, false)]['total_price']
                ];
            }
            foreach ($diffDates as $diffDate) {
                $datas[] = [
                    'name' => Yii::$app->formatter->asDate($diffDate),
                    'y'    => 0
                ];
            }
        }
//        ArrayHelper::multisort($datas, 'name');

        Yii::$app->cache->set('reportRevenue', $datas);
        return empty($datas) ? 'empty' : $this->asJson(
            $datas
        );
    }

    public function actionGenerateTransactionReport()
    {
        $dateFrom = Yii::$app->request->post('dateFrom');
        $dateTo   = Yii::$app->request->post('dateTo');

        if ($dateTo == '' && $dateFrom != '') {
            $dateTempFrom = strtotime($dateFrom . '00:00:00');
            $dateTempTo   = strtotime($dateFrom . '23:59:59');

        } else if ($dateTo != '' && $dateFrom == '') {
            $dateTempFrom = strtotime($dateTo . '00:00:00');
            $dateTempTo   = strtotime($dateTo . '23:59:59');
        } else {
            $dateTempFrom = strtotime($dateFrom . '00:00:00');
            $dateTempTo   = strtotime($dateTo . '23:59:59');
        }
        $totalOrders = Orders::find()
                             ->where(['payment_status' => [1, 3, 0]])
                             ->andFilterWhere(['>=', 'created_date', $dateTempFrom])
                             ->andFilterWhere(['<=', 'created_date', $dateTempTo])->count();
        if ($totalOrders > 0) {
            $totalSuccess = Orders::find()
                                  ->where(['payment_status' => 1])
                                  ->andFilterWhere(['>=', 'created_date', $dateTempFrom])
                                  ->andFilterWhere(['<=', 'created_date', $dateTempTo])
                                  ->count();
            $totalFail    = Orders::find()
                                  ->where(['payment_status' => 3])
                                  ->andFilterWhere(['>=', 'created_date', $dateTempFrom])
                                  ->andFilterWhere(['<=', 'created_date', $dateTempTo])
                                  ->count();
            $totalHold    = Orders::find()
                                  ->where(['payment_status' => 0])
                                  ->andFilterWhere(['>=', 'created_date', $dateTempFrom])
                                  ->andFilterWhere(['<=', 'created_date', $dateTempTo])
                                  ->count();
            $totalCancel    = Orders::find()
                                  ->where(['payment_status' => 4])
                                  ->andFilterWhere(['>=', 'created_date', $dateTempFrom])
                                  ->andFilterWhere(['<=', 'created_date', $dateTempTo])
                                  ->count();
            $datas        = [
                [
                    'name' => 'Giao dịch thành công',
                    'y'    => ($totalSuccess / $totalOrders) * 100
                ],
                [
                    'name' => 'Giao dịch thất bại',
                    'y'    => ($totalFail / $totalOrders) * 100
                ],
                [
                    'name' => 'Giao dịch chờ thanh toán',
                    'y'    => ($totalHold / $totalOrders) * 100
                ],
                [
                    'name' => 'Giao dịch hủy',
                    'y'    => ($totalCancel / $totalOrders) * 100
                ],
            ];

            return $this->asJson([
                $datas,
                [$totalOrders, $totalSuccess, $totalFail, $totalHold, $totalCancel]
            ]);
        }

        return 'empty';
    }

    public function actionExportReportInventoryByPrice()
    {
        $objPHPExcel = new \PHPExcel();

        //PAGE SETUP
        //$objPHPExcel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE)->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
        $titles = ['Ngày', 'Số phòng'];
        $colums = range('A', 'B');
        foreach ($colums as $key => $column) {
            $objPHPExcel->getActiveSheet()->getColumnDimension($column)->setAutoSize(true);
            $objPHPExcel->getActiveSheet()->setCellValue($column . '2', $titles[$key]);
        }

        $row         = 3;
        $reportDatas = Yii::$app->cache->get('reportDateInventory');
        foreach ($reportDatas as $reportData) {
            $objPHPExcel->getActiveSheet()->setCellValue('A' . $row, $reportData['name']);
            $objPHPExcel->getActiveSheet()->setCellValue('B' . $row, $reportData['y']);
            $row++;
        }

        //ACTIVE SHEET STYLE FORMAT
        $objPHPExcel->getActiveSheet()->getStyle('A2:B2')->getFont()->setBold(true)->setSize(11);
        $objPHPExcel->getActiveSheet()->getStyle('A2:B2')->getAlignment()->applyFromArray(array('horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER))->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
        $objPHPExcel->getActiveSheet()->getStyle("A2:B$row")->getBorders()->getAllBorders()->setBorderStyle(\PHPExcel_Style_Border::BORDER_THIN);
        ob_start();
        header('Pragma: public');
        header('Expires: 0');
        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename=Report_inventory_'.time().'.xlsx ');
        header('Content-Transfer-Encoding: binary ');
        header('Cache-Control: max-age=0');

        $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
    }

    public function actionExportReportRevenue()
    {
        $objPHPExcel = new \PHPExcel();

        //PAGE SETUP
        //$objPHPExcel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE)->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);
        $titles = ['Ngày', 'Số tiền'];
        $colums = range('A', 'B');
        foreach ($colums as $key => $column) {
            $objPHPExcel->getActiveSheet()->getColumnDimension($column)->setAutoSize(true);
            $objPHPExcel->getActiveSheet()->setCellValue($column . '2', $titles[$key]);
        }

        $row         = 3;
        $reportDatas = Yii::$app->cache->get('reportRevenue');
        foreach ($reportDatas as $reportData) {
            $objPHPExcel->getActiveSheet()->setCellValue('A' . $row, $reportData['name']);
            $objPHPExcel->getActiveSheet()->setCellValue('B' . $row, $reportData['y']);
            $row++;
        }

        //ACTIVE SHEET STYLE FORMAT
        $objPHPExcel->getActiveSheet()->getStyle('A2:B2')->getFont()->setBold(true)->setSize(11);
        $objPHPExcel->getActiveSheet()->getStyle('A2:B2')->getAlignment()->applyFromArray(array('horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER))->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
        $objPHPExcel->getActiveSheet()->getStyle("A2:B$row")->getBorders()->getAllBorders()->setBorderStyle(\PHPExcel_Style_Border::BORDER_THIN);
        ob_start();
        header('Pragma: public');
        header('Expires: 0');
        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename=Report_revenue_'.time().'.xlsx ');
        header('Content-Transfer-Encoding: binary ');
        header('Cache-Control: max-age=0');

        $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save('php://output');
    }
}
